using System;
using System.IO;
using Renci.SshNet;

namespace SftpDirectoryMirror
{
    class Program
    {
        // SFTPサーバーの接続情報
        private const string SftpHost = "example.com";
        private const int SftpPort = 22;
        private const string SftpUsername = "username";
        private const string SftpPassword = "password";

        // SFTPサーバ上の対象ディレクトリ（ルートパス）
        private const string SftpRootPath = "/path/to/source";

        // ローカルに作成するルートパス
        private const string LocalRootPath = @"C:\SftpMirror";

        static void Main(string[] args)
        {
            try
            {
                Console.WriteLine("SFTPサーバーのディレクトリ構造をミラーリング開始...");

                using (var client = new SftpClient(SftpHost, SftpPort, SftpUsername, SftpPassword))
                {
                    client.Connect();
                    ProcessSftpDirectory(client, SftpRootPath, LocalRootPath);
                    client.Disconnect();
                }

                Console.WriteLine("処理完了しました。");
            }
            catch (Exception ex)
            {
                Console.WriteLine("エラーが発生しました: " + ex.Message);
            }
        }

        /// <summary>
        /// SFTPサーバ上のディレクトリを再帰的に走査し、同じ構造をローカルに作成します。
        /// ファイルは同名で作成し、内容は「Dummy」とします。
        /// </summary>
        /// <param name="client">接続済みの SftpClient インスタンス</param>
        /// <param name="sftpPath">SFTPサーバ上の対象ディレクトリのパス</param>
        /// <param name="localPath">ローカルに作成するディレクトリのパス</param>
        private static void ProcessSftpDirectory(SftpClient client, string sftpPath, string localPath)
        {
            // ローカルにディレクトリが存在しなければ作成
            if (!Directory.Exists(localPath))
            {
                Directory.CreateDirectory(localPath);
                Console.WriteLine("作成: " + localPath);
            }

            // SFTPサーバ上のディレクトリ内のエントリ一覧を取得
            var entries = client.ListDirectory(sftpPath);
            foreach (var entry in entries)
            {
                // "." と ".." はスキップ
                if (entry.Name == "." || entry.Name == "..")
                    continue;

                // エントリ名をそのまま使うか正規化するかの判断
                // 全角英数字の場合は変換せず、そのまま使用する
                string safeName = IsAllFullWidthAlphaNumeric(entry.Name)
                    ? entry.Name
                    : entry.Name.Normalize();

                // パスを構築（sftpPath は末尾に '/' が含まれていない場合も考慮）
                string sftpFullPath = $"{sftpPath.TrimEnd('/')}/{safeName}";
                string localFullPath = Path.Combine(localPath, safeName);

                if (entry.IsDirectory)
                {
                    // ディレクトリの場合は再帰的に処理
                    ProcessSftpDirectory(client, sftpFullPath, localFullPath);
                }
                else if (entry.IsRegularFile)
                {
                    // ファイルの場合：ローカルに「Dummy」文字列を内容とするファイルを作成
                    try
                    {
                        File.WriteAllText(localFullPath, "Dummy");
                        Console.WriteLine("ファイル作成: " + localFullPath);
                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine("ファイル作成失敗: " + localFullPath + " (" + ex.Message + ")");
                    }
                }
            }
        }

        /// <summary>
        /// 指定された文字列が全て全角英数字で構成されているかどうかを判定します。
        /// 対象の文字は全角数字（U+FF10～U+FF19）および全角英字（U+FF21～U+FF3A, U+FF41～U+FF5A）です。
        /// </summary>
        /// <param name="s">チェック対象の文字列</param>
        /// <returns>すべて全角英数字であれば true、そうでなければ false</returns>
        private static bool IsAllFullWidthAlphaNumeric(string s)
        {
            if (string.IsNullOrEmpty(s))
                return false;

            foreach (char c in s)
            {
                // 全角数字の場合
                if (c >= '\uFF10' && c <= '\uFF19')
                    continue;
                // 全角大文字アルファベットの場合
                if (c >= '\uFF21' && c <= '\uFF3A')
                    continue;
                // 全角小文字アルファベットの場合
                if (c >= '\uFF41' && c <= '\uFF5A')
                    continue;

                // 1文字でも上記以外があれば false を返す
                return false;
            }
            return true;
        }
    }
}
